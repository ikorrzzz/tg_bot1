from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

from ads_manager.ads_manager import format_ad, load_ads
from buttons_manager.buttons_manager import ad_inline_kb, main_menu_kb
from aiogram.filters import CommandStart

from states import AddAdStates

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n" "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?"
    await message.answer(text, reply_markup=main_menu_kb())


@router.message(Command("help"))
async def cmd_help(message: Message):
    text = (
        "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "‚Ä¢ /add ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å)\n"
        "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø—Ä–µ–¥–ª–æ–∂—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Äî —Å–ø—Ä–æ—à—É –ø—Ä–æ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å ‚Äî —Å–æ—Ö—Ä–∞–Ω—é –∫–∞–∫ –∞—É–¥–∏–æ-–æ–±—ä—è–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ –£ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏: ‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è –∏ üóë –£–¥–∞–ª–∏—Ç—å (–¥–ª—è –∞–≤—Ç–æ—Ä–∞)\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ª–∞–π–∫–Ω—É—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑\n"
        "‚Ä¢ –ê–≤—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∞–π–∫–∞—Ö –µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
    )
    await message.answer(text, reply_markup=main_menu_kb())


@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddAdStates.waiting_for_content)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ –∏–ª–∏ –≥–æ–ª–æ—Å –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n"
        "–î–ª—è —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.",
        reply_markup=main_menu_kb(),
    )


@router.message(Command("list"))
async def cmd_list(message: Message):
    ads = load_ads()
    if not ads:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π.",
                             reply_markup=main_menu_kb())
        return
    if message.from_user is None:
        # –ù–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–π—Ç–∏ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
    for ad in ads:
        is_author = ad["user_id"] == message.from_user.id
        kb = ad_inline_kb(ad["id"], is_author)
        if ad["type"] == "text":
            await message.answer(format_ad(ad), reply_markup=kb)
        elif ad["type"] == "photo":
            await message.answer_photo(
                ad["file_id"],
                caption=(ad.get("caption") or "") + f"\n\n{format_ad(ad)}",
                reply_markup=kb,
            )
        elif ad["type"] == "audio":
            await message.answer_audio(
                ad["file_id"],
                caption=(ad.get("caption") or "") + f"\n\n{format_ad(ad)}",
                reply_markup=kb,
            )
        elif ad["type"] == "voice":
            await message.answer_voice(
                ad["file_id"],
                caption=(ad.get("caption") or "") + f"\n\n{format_ad(ad)}",
                reply_markup=kb,
            )
